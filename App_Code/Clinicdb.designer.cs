#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18408
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TEST")]
public partial class ClinicdbDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Определения метода расширяемости
  partial void OnCreated();
  partial void InsertClinic(Clinic instance);
  partial void UpdateClinic(Clinic instance);
  partial void DeleteClinic(Clinic instance);
  #endregion
	
	public ClinicdbDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TESTConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public ClinicdbDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ClinicdbDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ClinicdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ClinicdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Clinic> Clinic
	{
		get
		{
			return this.GetTable<Clinic>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clinic")]
public partial class Clinic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdClinic;
	
	private string _ClinicName;
	
	private string _Adress;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdClinicChanging(int value);
    partial void OnIdClinicChanged();
    partial void OnClinicNameChanging(string value);
    partial void OnClinicNameChanged();
    partial void OnAdressChanging(string value);
    partial void OnAdressChanged();
    #endregion
	
	public Clinic()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdClinic", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IdClinic
	{
		get
		{
			return this._IdClinic;
		}
		set
		{
			if ((this._IdClinic != value))
			{
				this.OnIdClinicChanging(value);
				this.SendPropertyChanging();
				this._IdClinic = value;
				this.SendPropertyChanged("IdClinic");
				this.OnIdClinicChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClinicName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string ClinicName
	{
		get
		{
			return this._ClinicName;
		}
		set
		{
			if ((this._ClinicName != value))
			{
				this.OnClinicNameChanging(value);
				this.SendPropertyChanging();
				this._ClinicName = value;
				this.SendPropertyChanged("ClinicName");
				this.OnClinicNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adress", DbType="NVarChar(300)")]
	public string Adress
	{
		get
		{
			return this._Adress;
		}
		set
		{
			if ((this._Adress != value))
			{
				this.OnAdressChanging(value);
				this.SendPropertyChanging();
				this._Adress = value;
				this.SendPropertyChanged("Adress");
				this.OnAdressChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
